{"version":3,"sources":["constants/ActionType.js","actions/index.js","components/TaskListItem.js","components/TaskList.js","components/NewTaskForm.js","components/Search.js","components/Sort.js","components/Control.js","components/App.js","reportWebVitals.js","reducers/task.js","reducers/toggleForm.js","reducers/itemEditing.js","reducers/filterTable.js","reducers/search.js","reducers/sortTask.js","reducers/index.js","index.js"],"names":["LIST_ALL_TASKS","SAVE_TASK","TOGGLE_FORM","OPEN_FORM","CLOSE_FORM","UPDATE_STATUS_TASK","DELETE_TASK","EDIT_ITEM","FILTER_TABLE","SEARCH_TASK","SORT_TASK","toggleForm","type","types","closeForm","editTask","task","TaskListItem","changStatus","id","props","onUpdateStatus","deleteTask","onDeleteTask","onCloseForm","updateTask","onOpenForm","onEditTask","taskDetail","showStatus","status","className","onClick","this","taskIndex","name","Component","connect","state","dispatch","actions","DataTable","onFilter","e","target","value","Number","filerData","filterName","filterStatus","setState","onFilterTable","tasks","filterTable","keyword","sort","filter","toLowerCase","indexOf","sortBy","a","b","sortValue","elmTask","map","index","onChange","fitlerStatus","searchTask","sortTask","NewTaskForm","onChangeFn","onClearFn","onSubmitFn","preventDefault","onSaveTask","showTitle","itemEditing","nextProps","onSubmit","required","Search","onSearch","onSearchKeyword","placeholder","Sort","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","Control","changeDisplayValue","onToggleForm","onClear","showButton","displayValue","isDisplayForm","App","showForm","TaskList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","data","JSON","parse","localStorage","getItem","taskStateInit","checkID","result","forEach","myReducer","action","uuidv4","push","setItem","stringify","cloneTask","splice","initStateEditingTask","initStateFilter","initStateSort","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42d9b64b.chunk.js","sourcesContent":["export const LIST_ALL_TASKS = \"LIST_ALL_TASKS\";\r\nexport const SAVE_TASK = \"SAVE_TASK\";\r\nexport const TOGGLE_FORM = \"TOGGLE_FORM\";\r\nexport const OPEN_FORM= \"OPEN_FORM\";\r\nexport const CLOSE_FORM = \"CLOSE_FORM\";\r\nexport const UPDATE_STATUS_TASK = \"UPDATE_STATUS_TASK\";\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\nexport const EDIT_ITEM = \"EDIT_ITEM\";\r\nexport const FILTER_TABLE = \"FILTER_TABLE\";\r\nexport const SEARCH_TASK = \"SEARCH_TASK\";\r\nexport const SORT_TASK = \"SORT_TASK\";\r\n","import * as types from \"./../constants/ActionType\";\r\n\r\n//Tạo action tương ứng với type\r\nexport const listAllTasks = () => {\r\n    return {\r\n        type: types.LIST_ALL_TASKS\r\n    }\r\n}\r\n\r\nexport const saveTask = (task) => {\r\n    return {\r\n        type: types.SAVE_TASK,\r\n        task\r\n    }\r\n}\r\n\r\nexport const toggleForm = () => {\r\n    return {\r\n        type: types.TOGGLE_FORM,\r\n    }\r\n}\r\nexport const openForm = () => {\r\n    return {\r\n        type: types.OPEN_FORM,\r\n    }\r\n}\r\nexport const closeForm = () => {\r\n    return {\r\n        type: types.CLOSE_FORM,\r\n    }\r\n}\r\n\r\nexport const updateStatus = (id) => {\r\n  return {\r\n      type: types.UPDATE_STATUS_TASK,\r\n      id,\r\n  };\r\n};\r\n\r\nexport const deleteTask = (id) => {\r\n  return {\r\n      type: types.DELETE_TASK,\r\n      id,\r\n  };\r\n};\r\n\r\nexport const editTask = (task) => {\r\n  return {\r\n      type: types.EDIT_ITEM,\r\n      task,\r\n  };\r\n};\r\n\r\nexport const filterTable = (filter) => {\r\n  return {\r\n    type: types.FILTER_TABLE,\r\n    filter,\r\n  };\r\n};\r\n\r\nexport const searchTask = (keyword) => {\r\n    return {\r\n        type: types.SEARCH_TASK,\r\n        keyword\r\n    }\r\n}\r\n\r\nexport const sortTask = (sort) => {\r\n    return {\r\n      type: types.SORT_TASK,\r\n      sort,\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"./../actions/index\";\r\n\r\nclass TaskListItem extends Component {\r\n  changStatus = (id) => {\r\n    this.props.onUpdateStatus(id);\r\n  };\r\n\r\n  deleteTask = (id) => {\r\n    this.props.onDeleteTask(id);\r\n    this.props.onCloseForm();\r\n  };\r\n\r\n  updateTask = () => {\r\n    this.props.onOpenForm();\r\n    this.props.onEditTask(this.props.taskDetail);\r\n  };\r\n\r\n  showStatus = () => {\r\n    if (this.props.taskDetail.status === 1) {\r\n      return (\r\n        <span\r\n          className=\"bg-success p-2 rounded text-white cursor-pointer\"\r\n          onClick={() => this.changStatus(this.props.taskDetail.id)}\r\n        >\r\n          Active\r\n        </span>\r\n      );\r\n    } else if (this.props.taskDetail.status === 0) {\r\n      return (\r\n        <span\r\n          className=\"bg-danger p-2 rounded text-white cursor-pointer\"\r\n          onClick={() => this.changStatus(this.props.taskDetail.id)}\r\n        >\r\n          Hidden\r\n        </span>\r\n      );\r\n    } else if (this.props.taskDetail.status === 2) {\r\n      return (\r\n        <span\r\n          className=\"bg-info p-2 rounded text-white cursor-pointer\"\r\n          onClick={() => this.changStatus(this.props.taskDetail.id)}\r\n        >\r\n          Processing..\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <td>{this.props.taskIndex + 1}</td>\r\n        <td>{this.props.taskDetail.name}</td>\r\n        <td className=\"text-center align-middle text-white\">\r\n          {this.showStatus()}\r\n        </td>\r\n        <td className=\"text-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning\"\r\n            onClick={() => this.updateTask()}\r\n          >\r\n            <span className=\"fa fa-pencil mr-1\" />\r\n            Edit\r\n          </button>\r\n          &nbsp;\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger\"\r\n            onClick={() => this.deleteTask(this.props.taskDetail.id)}\r\n          >\r\n            <span className=\"fa fa-trash mr-1\" />\r\n            Delete\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onUpdateStatus: (id) => {\r\n      dispatch(actions.updateStatus(id));\r\n    },\r\n    onDeleteTask: (id) => {\r\n      dispatch(actions.deleteTask(id));\r\n    },\r\n    onCloseForm: () => {\r\n      dispatch(actions.closeForm());\r\n    },\r\n    onOpenForm: () => {\r\n      dispatch(actions.openForm());\r\n    },\r\n    onEditTask: (task) => {\r\n      dispatch(actions.editTask(task))\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListItem);\r\n","import React, { Component } from \"react\";\r\nimport TaskListItem from \"./TaskListItem\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"./../actions/index\";\r\n\r\nclass DataTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filterName: \"\",\r\n      filterStatus: -1,\r\n    };\r\n  }\r\n\r\n  onFilter = (e) => {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n\r\n    if (name === \"filterStatus\") {\r\n      value = Number(value);\r\n    }\r\n\r\n    let filerData = {\r\n      name: name === \"filterName\" ? value : this.state.filterName,\r\n      status: name === \"filterStatus\" ? Number(value) : this.state.filterStatus,\r\n    };\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n\r\n    this.props.onFilterTable(filerData);\r\n  };\r\n\r\n  render() {\r\n    let { tasks, filterTable, keyword, sort } = this.props;\r\n\r\n    if (filterTable.name) {\r\n      tasks = tasks.filter((task) => {\r\n        return (\r\n          task.name.toLowerCase().indexOf(filterTable.name.toLowerCase()) !== -1\r\n        );\r\n      });\r\n    }\r\n\r\n    if (filterTable.status >= 0) {\r\n      tasks = tasks.filter((task) => {\r\n        if (filterTable.status === -1) {\r\n          return tasks;\r\n        } else {\r\n          if (task.status === filterTable.status) {\r\n            return task.status === filterTable.status;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    if (keyword) {\r\n      tasks = tasks.filter((task) => {\r\n        return task.name.toLowerCase().indexOf(keyword) !== -1;\r\n      });\r\n    }\r\n\r\n    if (sort.sortBy === \"name\") {\r\n      tasks.sort((a, b) => {\r\n        if (a.name < b.name) {\r\n          return -sort.sortValue;\r\n        }\r\n        if (a.name > b.name) {\r\n          return sort.sortValue;\r\n        }\r\n      });\r\n    } else {\r\n      tasks.sort((a, b) => {\r\n        if (a.status < b.status) {\r\n          return -sort.sortValue;\r\n        } else {\r\n          return sort.sortValue;\r\n        }\r\n      });\r\n    }\r\n\r\n    let elmTask = tasks.map((task, index) => {\r\n      return <TaskListItem key={index} taskDetail={task} taskIndex={index} />;\r\n    });\r\n\r\n    return (\r\n      <div className=\"row mt-15\">\r\n        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <table className=\"table table-bordered table-hover\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"text-center\">STT</th>\r\n                <th className=\"text-center\">Tên</th>\r\n                <th className=\"text-center\">Trạng Thái</th>\r\n                <th className=\"text-center\">Hành Động</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td />\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"filterName\"\r\n                    value={this.state.filterName}\r\n                    onChange={this.onFilter}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"filterStatus\"\r\n                    value={this.state.fitlerStatus}\r\n                    onChange={this.onFilter}\r\n                  >\r\n                    <option value={-1}>All</option>\r\n                    <option value={0}>Hidden</option>\r\n                    <option value={1}>Active</option>\r\n                    <option value={2}>On process</option>\r\n                  </select>\r\n                </td>\r\n                <td />\r\n              </tr>\r\n              {elmTask}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    tasks: state.tasks,\r\n    filterTable: state.filterTable,\r\n    keyword: state.searchTask,\r\n    sort: state.sortTask,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onFilterTable: (filter) => {\r\n      dispatch(actions.filterTable(filter));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DataTable);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"./../actions/index\";\r\n\r\nclass NewTaskForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: \"\",\r\n      name: \"\",\r\n      status: 1,\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props.itemEditing) {\r\n      let { itemEditing } = this.props;\r\n      this.setState({\r\n        id: itemEditing.id,\r\n        name: itemEditing.name,\r\n        status: itemEditing.status,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        id: \"\",\r\n        name: \"\",\r\n        status: 2,\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps && nextProps.itemEditing) {\r\n      let { itemEditing } = nextProps;\r\n\r\n      this.setState({\r\n        id: itemEditing.id,\r\n        name: itemEditing.name,\r\n        status: itemEditing.status,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        id: \"\",\r\n        name: \"\",\r\n        status: 2,\r\n      });\r\n    }\r\n  }\r\n\r\n  onChangeFn = (e) => {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  onClearFn = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      status: 1,\r\n    });\r\n  };\r\n\r\n  onSubmitFn = (e) => {\r\n    // this.props.getData(this.state);\r\n    e.preventDefault();\r\n    this.props.onSaveTask(this.state);\r\n    this.onClearFn();\r\n    this.props.onCloseForm();\r\n  };\r\n\r\n  showTitle = () => {\r\n    if (this.state.id === \"\") {\r\n      return \"New task\";\r\n    } else {\r\n      return \"Edit task\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-xs-3 col-sm-3 col-md-3 col-lg-3 border p-2\">\r\n        <div className=\"panel panel-warning\">\r\n          <div className=\"panel-heading\">\r\n            <h2 className=\"panel-title text-center\">{this.showTitle()}</h2>\r\n          </div>\r\n          <div className=\"panel-body\">\r\n            <form onSubmit={this.onSubmitFn}>\r\n              <div className=\"form-group\">\r\n                <label>Name :</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"name\"\r\n                  value={this.state.name}\r\n                  onChange={this.onChangeFn}\r\n                />\r\n              </div>\r\n              <label>Status :</label>\r\n              <select\r\n                className=\"form-control\"\r\n                required=\"required\"\r\n                name=\"status\"\r\n                value={this.state.status}\r\n                onChange={this.onChangeFn}\r\n              >\r\n                <option value={0}>Hidden</option>\r\n                <option value={1}>Active</option>\r\n                <option value={2}>On process..</option>\r\n              </select>\r\n              <br />\r\n              <div className=\"text-right\">\r\n                <button type=\"submit\" className=\"btn btn-block btn-warning\">\r\n                  Save\r\n                </button>\r\n                &nbsp;\r\n                {/* <button type=\"submit\" className=\"btn btn-danger\">\r\n                  Cancel\r\n                </button> */}\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    itemEditing: state.itemEditing,\r\n  };\r\n};\r\n\r\n// chuyển action thành props\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    // Cặp keyvalue, key này sẽ là props của component\r\n    // Vì là thêm task mới nên sẽ có tham số đầu vào là task\r\n    onSaveTask: (task) => {\r\n      dispatch(actions.saveTask(task));\r\n    },\r\n    onCloseForm: () => {\r\n      dispatch(actions.closeForm());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTaskForm);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"./../actions/index\";\r\n\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      keyword: \"\",\r\n    };\r\n  }\r\n\r\n  onSearch = (keyword) => {\r\n    this.props.onSearch(keyword);\r\n  };\r\n\r\n  onSearchKeyword = (e) => {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n        <div className=\"input-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Key...\"\r\n            onChange={this.onSearchKeyword}\r\n            name=\"keyword\"\r\n            value={this.state.keyword}\r\n          />\r\n          <span className=\"input-group-btn\">\r\n            <button\r\n              className=\"btn btn-primary ml-1\"\r\n              type=\"button\"\r\n              onClick={() => this.onSearch(this.state.keyword)}\r\n            >\r\n              <span className=\"fa fa-search\" />\r\n            </button>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onSearch: (keyword) => {\r\n      dispatch(actions.searchTask(keyword))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"./../actions/index\";\r\n\r\nclass Sort extends Component {\r\n  onSort = (sortBy, sortValue) => {\r\n    this.props.onSort({\r\n      sortBy,\r\n      sortValue,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n        <div className=\"dropdown\">\r\n          <button\r\n            className=\"btn btn-primary dropdown-toggle\"\r\n            type=\"button\"\r\n            id=\"dropdownMenu1\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"true\"\r\n          >\r\n            Sort <span className=\"fa fa-caret-square-o-down ml-1\" />\r\n          </button>\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n            <li\r\n              className={\r\n                this.props.sort.sortBy === \"name\" &&\r\n                this.props.sort.sortValue === 1\r\n                  ? \"sort_selected\"\r\n                  : \" \"\r\n              }\r\n            >\r\n              <a role=\"button\" onClick={() => this.onSort(\"name\", 1)}>\r\n                <span className=\"fa fa-sort-alpha-asc pr-5\">Tên A-Z</span>\r\n              </a>\r\n            </li>\r\n            <li\r\n              className={\r\n                this.props.sort.sortBy === \"name\" &&\r\n                this.props.sort.sortValue === -1\r\n                  ? \"sort_selected\"\r\n                  : \" \"\r\n              }\r\n            >\r\n              <a role=\"button\" onClick={() => this.onSort(\"name\", -1)}>\r\n                <span className=\"fa fa-sort-alpha-desc pr-5\">Tên Z-A</span>\r\n              </a>\r\n            </li>\r\n            <li role=\"separator\" className=\"divider\" />\r\n            <li\r\n              className={\r\n                this.props.sort.sortBy === \"status\" &&\r\n                this.props.sort.sortValue === 1\r\n                  ? \"sort_selected\"\r\n                  : \" \"\r\n              }\r\n            >\r\n              <a role=\"button\" onClick={() => this.onSort(\"status\", 1)}>\r\n                Active & Hidden status\r\n              </a>\r\n            </li>\r\n            {/* <li\r\n              className={\r\n                this.props.sortBy === \"status\" && this.props.sortValue === 2\r\n                  ? \"sort_selected\"\r\n                  : \" \"\r\n              }\r\n            >\r\n              <a role=\"button\" onClick={() => this.onSort(\"status\", 2)}>\r\n                Hidden status\r\n              </a>\r\n            </li> */}\r\n            <li\r\n              className={\r\n                this.props.sort.sortBy === \"status\" &&\r\n                this.props.sort.sortValue === -1\r\n                  ? \"sort_selected\"\r\n                  : \" \"\r\n              }\r\n            >\r\n              <a role=\"button\" onClick={() => this.onSort(\"status\", -1)}>\r\n                Process status\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    sort: state.sortTask,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onSort: (sort) => {\r\n      dispatch(actions.sortTask(sort));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sort);\r\n","import React, { Component } from \"react\";\r\nimport Search from \"./Search\";\r\nimport Sort from \"./Sort\";\r\nimport * as actions from \"./../actions/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Control extends Component {\r\n  changeDisplayValue = () => {\r\n    this.props.onToggleForm();\r\n    this.props.onClear({\r\n      id: \"\",\r\n      name: \"\",\r\n      status: 2,\r\n    });\r\n  };\r\n\r\n  showButton = () => {\r\n    if (this.props.displayValue) {\r\n      return (\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-danger mb-3\"\r\n          onClick={() => this.changeDisplayValue()}\r\n        >\r\n          Cancel\r\n        </button>\r\n      );\r\n    } else {\r\n      return (\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary mb-3\"\r\n          onClick={() => this.changeDisplayValue()}\r\n        >\r\n          Add new task\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  onSort = (sortBy, sortValue) => {\r\n    this.props.onSort(sortBy, sortValue);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.showButton()}\r\n        <div className=\"row mt-15 mb-3\">\r\n          <Search />\r\n          <Sort />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    displayValue: state.isDisplayForm,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n  return {\r\n    onToggleForm: () => {\r\n      dispatch(actions.toggleForm());\r\n    },\r\n    onClear: (task) => {\r\n      dispatch(actions.editTask(task));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Control);\r\n","import \"../App.css\";\nimport TaskList from \"./TaskList\";\nimport NewTaskForm from \"./NewTaskForm\";\nimport Control from \"./Control\";\n// import TasksExample from \"../TasksExample.json\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./../actions/index\";\n\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  showForm = () => {\n    if (this.props.isDisplayForm) {\n      return <NewTaskForm />;\n    }\n  };\n\n  onCloseForm = () => {\n    this.props.onCloseForm();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"jumbotron\">\n          <h1 className=\"display-3 text-center text-uppercase\">To do list</h1>\n        </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.showForm()}\n            <div className=\"col-xs col-sm col-md col-lg\">\n              <Control />\n              <TaskList />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isDisplayForm: state.isDisplayForm,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    onToggleForm: () => {\n      dispatch(actions.toggleForm());\n    },\n    onCloseForm: () => {\n      dispatch(actions.closeForm());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//Import actionType\r\nimport * as types from \"./../constants/ActionType\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nvar data = JSON.parse(localStorage.getItem(\"tasks\"));\r\n\r\n//Tạo state mặc định\r\nvar taskStateInit = data ? data : [];\r\n\r\nlet checkID = (tasks, id) => {\r\n  let result = -1;\r\n  tasks.forEach((task, index) => {\r\n    if (task.id === id) {\r\n      result = index;\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nvar myReducer = (state = taskStateInit, action) => {\r\n  var id = \"\";\r\n  var index = -1;\r\n  switch (action.type) {\r\n    case types.LIST_ALL_TASKS:\r\n      return state;\r\n    case types.SAVE_TASK:\r\n      var task = {\r\n        id: action.task.id,\r\n        name: action.task.name,\r\n        status: Number(action.task.status),\r\n      };\r\n\r\n      if (!task.id) {\r\n        task.id = uuidv4();\r\n        state.push(task);\r\n      } else {\r\n        index = checkID(state, task.id);\r\n        state[index] = task;\r\n      }\r\n     \r\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\r\n      return [...state];\r\n    case types.UPDATE_STATUS_TASK:\r\n      id = action.id;\r\n      index = checkID(state, id);\r\n\r\n      let cloneTask = { ...state[index] };\r\n\r\n      if (index !== -1) {\r\n        if (cloneTask.status > -1 && cloneTask.status < 3) {\r\n          if (cloneTask.status === 2) {\r\n            cloneTask.status = 0;\r\n          } else {\r\n            cloneTask.status = cloneTask.status + 1;\r\n          }\r\n          state[index] = cloneTask;\r\n          localStorage.setItem(\"tasks\", JSON.stringify(state));\r\n        }\r\n      }\r\n      return [...state];\r\n    case types.DELETE_TASK:\r\n      id = action.id;\r\n      index = checkID(state, id);\r\n      if (index !== -1) {\r\n        // Từ vị trí index, xóa đi 1 phần tử\r\n        state.splice(index, 1);\r\n      }\r\n      localStorage.setItem(\"tasks\", JSON.stringify(state));\r\n      return [...state];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default myReducer;\r\n","import * as types from \"../constants/ActionType\";\r\n\r\nvar initStateForm = false; //Close form\r\n\r\nvar myReducer = (state = initStateForm, action) => {\r\n    switch (action.type) {\r\n        case types.TOGGLE_FORM:\r\n            return !state;\r\n        case types.CLOSE_FORM:\r\n            state = false;\r\n            return state;\r\n        case types.OPEN_FORM:\r\n            state = true;\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import * as types from \"../constants/ActionType\";\r\n\r\nvar initStateEditingTask = {\r\n  // id: \"\",\r\n  // name: \"\",\r\n  // status: 2,\r\n};\r\n\r\nvar myReducer = (state = initStateEditingTask, action) => {\r\n  switch (action.type) {\r\n    case types.EDIT_ITEM:\r\n      return action.task;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default myReducer;\r\n","import * as types from \"../constants/ActionType\";\r\n\r\nvar initStateFilter = {\r\n  name: \"\",\r\n  status: -1\r\n};\r\n\r\nvar myReducer = (state = initStateFilter, action) => {\r\n  switch (action.type) {\r\n    case types.FILTER_TABLE:\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default myReducer;\r\n","import * as types from \"../constants/ActionType\";\r\n\r\nvar initStateSearch = \"\";\r\n\r\nvar myReducer = (state = initStateSearch, action) => {\r\n  switch (action.type) {\r\n      case types.SEARCH_TASK:\r\n          return action.keyword;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default myReducer;\r\n","import * as types from \"../constants/ActionType\";\r\n\r\nvar initStateSort = {\r\n  sortBy: \"name\",\r\n  sortValue: 1,\r\n};\r\n\r\nvar myReducer = (state = initStateSort, action) => {\r\n  switch (action.type) {\r\n    case types.SORT_TASK:\r\n      return action.sort;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default myReducer;\r\n","//Trong đây import các reducer vô rồi combine lại\r\nimport { combineReducers } from \"redux\";\r\nimport tasks from \"./task\";\r\nimport isDisplayForm from \"./toggleForm\";\r\nimport itemEditing from \"./itemEditing\";\r\nimport filterTable from \"./filterTable\";\r\nimport searchTask from \"./search\";\r\nimport sortTask from \"./sortTask\";\r\n\r\n//Reducer của mình bằng combine các reducer kia\r\nconst myReducer = combineReducers({\r\n  tasks, //tasks: tasks (task đầu là tên mình tự đặt, task sau là cái mình import ở trên)\r\n  isDisplayForm,\r\n  itemEditing,\r\n  filterTable,\r\n  searchTask,\r\n  sortTask,\r\n});\r\n\r\nexport default myReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { createStore } from \"redux\";\nimport myReducer from \"./reducers/index\";\nimport { Provider } from \"react-redux\";\n\n//Create store\nconst store = createStore(\n  myReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}